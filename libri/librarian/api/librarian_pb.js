/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var librarian_api_documents_pb = require('../../librarian/api/documents_pb.js');
goog.exportSymbol('proto.api.BloomFilter', null, global);
goog.exportSymbol('proto.api.FindRequest', null, global);
goog.exportSymbol('proto.api.FindResponse', null, global);
goog.exportSymbol('proto.api.GetRequest', null, global);
goog.exportSymbol('proto.api.GetResponse', null, global);
goog.exportSymbol('proto.api.IntroduceRequest', null, global);
goog.exportSymbol('proto.api.IntroduceResponse', null, global);
goog.exportSymbol('proto.api.PeerAddress', null, global);
goog.exportSymbol('proto.api.Publication', null, global);
goog.exportSymbol('proto.api.PutOperation', null, global);
goog.exportSymbol('proto.api.PutRequest', null, global);
goog.exportSymbol('proto.api.PutResponse', null, global);
goog.exportSymbol('proto.api.RequestMetadata', null, global);
goog.exportSymbol('proto.api.ResponseMetadata', null, global);
goog.exportSymbol('proto.api.StoreRequest', null, global);
goog.exportSymbol('proto.api.StoreResponse', null, global);
goog.exportSymbol('proto.api.SubscribeRequest', null, global);
goog.exportSymbol('proto.api.SubscribeResponse', null, global);
goog.exportSymbol('proto.api.Subscription', null, global);
goog.exportSymbol('proto.api.VerifyRequest', null, global);
goog.exportSymbol('proto.api.VerifyResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RequestMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RequestMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.RequestMetadata.displayName = 'proto.api.RequestMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RequestMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RequestMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RequestMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.RequestMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    pubKey: msg.getPubKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RequestMetadata}
 */
proto.api.RequestMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RequestMetadata;
  return proto.api.RequestMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RequestMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RequestMetadata}
 */
proto.api.RequestMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.RequestMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.RequestMetadata.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RequestMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.RequestMetadata.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.RequestMetadata.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.api.RequestMetadata.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.api.RequestMetadata.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.RequestMetadata.prototype.setRequestId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes pub_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.RequestMetadata.prototype.getPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pub_key = 2;
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {string}
 */
proto.api.RequestMetadata.prototype.getPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubKey()));
};


/**
 * optional bytes pub_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {!Uint8Array}
 */
proto.api.RequestMetadata.prototype.getPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.RequestMetadata.prototype.setPubKey = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ResponseMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ResponseMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ResponseMetadata.displayName = 'proto.api.ResponseMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ResponseMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ResponseMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ResponseMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.ResponseMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    pubKey: msg.getPubKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ResponseMetadata}
 */
proto.api.ResponseMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ResponseMetadata;
  return proto.api.ResponseMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ResponseMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ResponseMetadata}
 */
proto.api.ResponseMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.ResponseMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.ResponseMetadata.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ResponseMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.ResponseMetadata.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getPubKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.ResponseMetadata.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.api.ResponseMetadata.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.api.ResponseMetadata.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.ResponseMetadata.prototype.setRequestId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes pub_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.ResponseMetadata.prototype.getPubKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pub_key = 2;
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {string}
 */
proto.api.ResponseMetadata.prototype.getPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubKey()));
};


/**
 * optional bytes pub_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {!Uint8Array}
 */
proto.api.ResponseMetadata.prototype.getPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.ResponseMetadata.prototype.setPubKey = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.IntroduceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.IntroduceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.IntroduceRequest.displayName = 'proto.api.IntroduceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.IntroduceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.IntroduceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.IntroduceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.IntroduceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.RequestMetadata.toObject(includeInstance, f),
    self: (f = msg.getSelf()) && proto.api.PeerAddress.toObject(includeInstance, f),
    numPeers: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.IntroduceRequest}
 */
proto.api.IntroduceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.IntroduceRequest;
  return proto.api.IntroduceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.IntroduceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.IntroduceRequest}
 */
proto.api.IntroduceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestMetadata;
      reader.readMessage(value,proto.api.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.api.PeerAddress;
      reader.readMessage(value,proto.api.PeerAddress.deserializeBinaryFromReader);
      msg.setSelf(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.IntroduceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.IntroduceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.IntroduceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.IntroduceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = this.getSelf();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.PeerAddress.serializeBinaryToWriter
    );
  }
  f = this.getNumPeers();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional RequestMetadata metadata = 1;
 * @return {?proto.api.RequestMetadata}
 */
proto.api.IntroduceRequest.prototype.getMetadata = function() {
  return /** @type{?proto.api.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestMetadata, 1));
};


/** @param {?proto.api.RequestMetadata|undefined} value */
proto.api.IntroduceRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.IntroduceRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.IntroduceRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PeerAddress self = 2;
 * @return {?proto.api.PeerAddress}
 */
proto.api.IntroduceRequest.prototype.getSelf = function() {
  return /** @type{?proto.api.PeerAddress} */ (
    jspb.Message.getWrapperField(this, proto.api.PeerAddress, 2));
};


/** @param {?proto.api.PeerAddress|undefined} value */
proto.api.IntroduceRequest.prototype.setSelf = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.IntroduceRequest.prototype.clearSelf = function() {
  this.setSelf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.IntroduceRequest.prototype.hasSelf = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 num_peers = 3;
 * @return {number}
 */
proto.api.IntroduceRequest.prototype.getNumPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.api.IntroduceRequest.prototype.setNumPeers = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.IntroduceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.IntroduceResponse.repeatedFields_, null);
};
goog.inherits(proto.api.IntroduceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.IntroduceResponse.displayName = 'proto.api.IntroduceResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.IntroduceResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.IntroduceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.IntroduceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.IntroduceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.IntroduceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.ResponseMetadata.toObject(includeInstance, f),
    self: (f = msg.getSelf()) && proto.api.PeerAddress.toObject(includeInstance, f),
    peersList: jspb.Message.toObjectList(msg.getPeersList(),
    proto.api.PeerAddress.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.IntroduceResponse}
 */
proto.api.IntroduceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.IntroduceResponse;
  return proto.api.IntroduceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.IntroduceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.IntroduceResponse}
 */
proto.api.IntroduceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ResponseMetadata;
      reader.readMessage(value,proto.api.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.api.PeerAddress;
      reader.readMessage(value,proto.api.PeerAddress.deserializeBinaryFromReader);
      msg.setSelf(value);
      break;
    case 3:
      var value = new proto.api.PeerAddress;
      reader.readMessage(value,proto.api.PeerAddress.deserializeBinaryFromReader);
      msg.addPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.IntroduceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.IntroduceResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.IntroduceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.IntroduceResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = this.getSelf();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.PeerAddress.serializeBinaryToWriter
    );
  }
  f = this.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.api.PeerAddress.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMetadata metadata = 1;
 * @return {?proto.api.ResponseMetadata}
 */
proto.api.IntroduceResponse.prototype.getMetadata = function() {
  return /** @type{?proto.api.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.ResponseMetadata, 1));
};


/** @param {?proto.api.ResponseMetadata|undefined} value */
proto.api.IntroduceResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.IntroduceResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.IntroduceResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PeerAddress self = 2;
 * @return {?proto.api.PeerAddress}
 */
proto.api.IntroduceResponse.prototype.getSelf = function() {
  return /** @type{?proto.api.PeerAddress} */ (
    jspb.Message.getWrapperField(this, proto.api.PeerAddress, 2));
};


/** @param {?proto.api.PeerAddress|undefined} value */
proto.api.IntroduceResponse.prototype.setSelf = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.IntroduceResponse.prototype.clearSelf = function() {
  this.setSelf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.IntroduceResponse.prototype.hasSelf = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PeerAddress peers = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.api.PeerAddress>}
 */
proto.api.IntroduceResponse.prototype.getPeersList = function() {
  return /** @type{!Array.<!proto.api.PeerAddress>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.PeerAddress, 3));
};


/** @param {!Array.<!proto.api.PeerAddress>} value */
proto.api.IntroduceResponse.prototype.setPeersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.api.PeerAddress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.PeerAddress}
 */
proto.api.IntroduceResponse.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.api.PeerAddress, opt_index);
};


proto.api.IntroduceResponse.prototype.clearPeersList = function() {
  this.setPeersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.FindRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.FindRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.FindRequest.displayName = 'proto.api.FindRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.FindRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.FindRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.FindRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.FindRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.RequestMetadata.toObject(includeInstance, f),
    key: msg.getKey_asB64(),
    numPeers: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.FindRequest}
 */
proto.api.FindRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.FindRequest;
  return proto.api.FindRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.FindRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.FindRequest}
 */
proto.api.FindRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestMetadata;
      reader.readMessage(value,proto.api.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.FindRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.FindRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.FindRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.FindRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = this.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getNumPeers();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional RequestMetadata metadata = 1;
 * @return {?proto.api.RequestMetadata}
 */
proto.api.FindRequest.prototype.getMetadata = function() {
  return /** @type{?proto.api.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestMetadata, 1));
};


/** @param {?proto.api.RequestMetadata|undefined} value */
proto.api.FindRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.FindRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.FindRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.FindRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.api.FindRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.api.FindRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.FindRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 num_peers = 3;
 * @return {number}
 */
proto.api.FindRequest.prototype.getNumPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.api.FindRequest.prototype.setNumPeers = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.FindResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.FindResponse.repeatedFields_, null);
};
goog.inherits(proto.api.FindResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.FindResponse.displayName = 'proto.api.FindResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.FindResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.FindResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.FindResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.FindResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.FindResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.ResponseMetadata.toObject(includeInstance, f),
    peersList: jspb.Message.toObjectList(msg.getPeersList(),
    proto.api.PeerAddress.toObject, includeInstance),
    value: (f = msg.getValue()) && librarian_api_documents_pb.Document.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.FindResponse}
 */
proto.api.FindResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.FindResponse;
  return proto.api.FindResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.FindResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.FindResponse}
 */
proto.api.FindResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ResponseMetadata;
      reader.readMessage(value,proto.api.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.api.PeerAddress;
      reader.readMessage(value,proto.api.PeerAddress.deserializeBinaryFromReader);
      msg.addPeers(value);
      break;
    case 3:
      var value = new librarian_api_documents_pb.Document;
      reader.readMessage(value,librarian_api_documents_pb.Document.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.FindResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.FindResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.FindResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.FindResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = this.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.api.PeerAddress.serializeBinaryToWriter
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      librarian_api_documents_pb.Document.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMetadata metadata = 1;
 * @return {?proto.api.ResponseMetadata}
 */
proto.api.FindResponse.prototype.getMetadata = function() {
  return /** @type{?proto.api.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.ResponseMetadata, 1));
};


/** @param {?proto.api.ResponseMetadata|undefined} value */
proto.api.FindResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.FindResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.FindResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PeerAddress peers = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.api.PeerAddress>}
 */
proto.api.FindResponse.prototype.getPeersList = function() {
  return /** @type{!Array.<!proto.api.PeerAddress>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.PeerAddress, 2));
};


/** @param {!Array.<!proto.api.PeerAddress>} value */
proto.api.FindResponse.prototype.setPeersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.api.PeerAddress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.PeerAddress}
 */
proto.api.FindResponse.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.api.PeerAddress, opt_index);
};


proto.api.FindResponse.prototype.clearPeersList = function() {
  this.setPeersList([]);
};


/**
 * optional Document value = 3;
 * @return {?proto.api.Document}
 */
proto.api.FindResponse.prototype.getValue = function() {
  return /** @type{?proto.api.Document} */ (
    jspb.Message.getWrapperField(this, librarian_api_documents_pb.Document, 3));
};


/** @param {?proto.api.Document|undefined} value */
proto.api.FindResponse.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.FindResponse.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.FindResponse.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.VerifyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.VerifyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.VerifyRequest.displayName = 'proto.api.VerifyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.VerifyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.VerifyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.VerifyRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.VerifyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.RequestMetadata.toObject(includeInstance, f),
    key: msg.getKey_asB64(),
    macKey: msg.getMacKey_asB64(),
    numPeers: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.VerifyRequest}
 */
proto.api.VerifyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.VerifyRequest;
  return proto.api.VerifyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.VerifyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.VerifyRequest}
 */
proto.api.VerifyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestMetadata;
      reader.readMessage(value,proto.api.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMacKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.VerifyRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.VerifyRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.VerifyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.VerifyRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = this.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getMacKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getNumPeers();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional RequestMetadata metadata = 1;
 * @return {?proto.api.RequestMetadata}
 */
proto.api.VerifyRequest.prototype.getMetadata = function() {
  return /** @type{?proto.api.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestMetadata, 1));
};


/** @param {?proto.api.RequestMetadata|undefined} value */
proto.api.VerifyRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.VerifyRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.VerifyRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.VerifyRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.api.VerifyRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.api.VerifyRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.VerifyRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes mac_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.api.VerifyRequest.prototype.getMacKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes mac_key = 3;
 * This is a type-conversion wrapper around `getMacKey()`
 * @return {string}
 */
proto.api.VerifyRequest.prototype.getMacKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMacKey()));
};


/**
 * optional bytes mac_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMacKey()`
 * @return {!Uint8Array}
 */
proto.api.VerifyRequest.prototype.getMacKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMacKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.VerifyRequest.prototype.setMacKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 num_peers = 4;
 * @return {number}
 */
proto.api.VerifyRequest.prototype.getNumPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.api.VerifyRequest.prototype.setNumPeers = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.VerifyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.VerifyResponse.repeatedFields_, null);
};
goog.inherits(proto.api.VerifyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.VerifyResponse.displayName = 'proto.api.VerifyResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.VerifyResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.VerifyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.VerifyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.VerifyResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.VerifyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.ResponseMetadata.toObject(includeInstance, f),
    mac: msg.getMac_asB64(),
    peersList: jspb.Message.toObjectList(msg.getPeersList(),
    proto.api.PeerAddress.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.VerifyResponse}
 */
proto.api.VerifyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.VerifyResponse;
  return proto.api.VerifyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.VerifyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.VerifyResponse}
 */
proto.api.VerifyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ResponseMetadata;
      reader.readMessage(value,proto.api.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMac(value);
      break;
    case 3:
      var value = new proto.api.PeerAddress;
      reader.readMessage(value,proto.api.PeerAddress.deserializeBinaryFromReader);
      msg.addPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.VerifyResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.VerifyResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.VerifyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.VerifyResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = this.getMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.api.PeerAddress.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMetadata metadata = 1;
 * @return {?proto.api.ResponseMetadata}
 */
proto.api.VerifyResponse.prototype.getMetadata = function() {
  return /** @type{?proto.api.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.ResponseMetadata, 1));
};


/** @param {?proto.api.ResponseMetadata|undefined} value */
proto.api.VerifyResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.VerifyResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.VerifyResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes mac = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.VerifyResponse.prototype.getMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes mac = 2;
 * This is a type-conversion wrapper around `getMac()`
 * @return {string}
 */
proto.api.VerifyResponse.prototype.getMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMac()));
};


/**
 * optional bytes mac = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMac()`
 * @return {!Uint8Array}
 */
proto.api.VerifyResponse.prototype.getMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMac()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.VerifyResponse.prototype.setMac = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated PeerAddress peers = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.api.PeerAddress>}
 */
proto.api.VerifyResponse.prototype.getPeersList = function() {
  return /** @type{!Array.<!proto.api.PeerAddress>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.PeerAddress, 3));
};


/** @param {!Array.<!proto.api.PeerAddress>} value */
proto.api.VerifyResponse.prototype.setPeersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.api.PeerAddress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.PeerAddress}
 */
proto.api.VerifyResponse.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.api.PeerAddress, opt_index);
};


proto.api.VerifyResponse.prototype.clearPeersList = function() {
  this.setPeersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PeerAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.PeerAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.PeerAddress.displayName = 'proto.api.PeerAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PeerAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PeerAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PeerAddress} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.PeerAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerId: msg.getPeerId_asB64(),
    peerName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 3, ""),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PeerAddress}
 */
proto.api.PeerAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PeerAddress;
  return proto.api.PeerAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PeerAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PeerAddress}
 */
proto.api.PeerAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.PeerAddress} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.PeerAddress.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PeerAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.PeerAddress.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPeerId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getPeerName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bytes peer_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.PeerAddress.prototype.getPeerId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes peer_id = 1;
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {string}
 */
proto.api.PeerAddress.prototype.getPeerId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerId()));
};


/**
 * optional bytes peer_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {!Uint8Array}
 */
proto.api.PeerAddress.prototype.getPeerId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerId()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.PeerAddress.prototype.setPeerId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string peer_name = 2;
 * @return {string}
 */
proto.api.PeerAddress.prototype.getPeerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.PeerAddress.prototype.setPeerName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string ip = 3;
 * @return {string}
 */
proto.api.PeerAddress.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.api.PeerAddress.prototype.setIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 port = 4;
 * @return {number}
 */
proto.api.PeerAddress.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.api.PeerAddress.prototype.setPort = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.StoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.StoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.StoreRequest.displayName = 'proto.api.StoreRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.StoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.StoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.StoreRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.StoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.RequestMetadata.toObject(includeInstance, f),
    key: msg.getKey_asB64(),
    value: (f = msg.getValue()) && librarian_api_documents_pb.Document.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.StoreRequest}
 */
proto.api.StoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.StoreRequest;
  return proto.api.StoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.StoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.StoreRequest}
 */
proto.api.StoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestMetadata;
      reader.readMessage(value,proto.api.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = new librarian_api_documents_pb.Document;
      reader.readMessage(value,librarian_api_documents_pb.Document.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.StoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.StoreRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.StoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.StoreRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = this.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      librarian_api_documents_pb.Document.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMetadata metadata = 1;
 * @return {?proto.api.RequestMetadata}
 */
proto.api.StoreRequest.prototype.getMetadata = function() {
  return /** @type{?proto.api.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestMetadata, 1));
};


/** @param {?proto.api.RequestMetadata|undefined} value */
proto.api.StoreRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.StoreRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.StoreRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.StoreRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.api.StoreRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.api.StoreRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.StoreRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Document value = 3;
 * @return {?proto.api.Document}
 */
proto.api.StoreRequest.prototype.getValue = function() {
  return /** @type{?proto.api.Document} */ (
    jspb.Message.getWrapperField(this, librarian_api_documents_pb.Document, 3));
};


/** @param {?proto.api.Document|undefined} value */
proto.api.StoreRequest.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.StoreRequest.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.StoreRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.StoreResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.StoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.StoreResponse.displayName = 'proto.api.StoreResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.StoreResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.StoreResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.StoreResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.StoreResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.ResponseMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.StoreResponse}
 */
proto.api.StoreResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.StoreResponse;
  return proto.api.StoreResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.StoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.StoreResponse}
 */
proto.api.StoreResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ResponseMetadata;
      reader.readMessage(value,proto.api.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.StoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.StoreResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.StoreResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.StoreResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.ResponseMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMetadata metadata = 1;
 * @return {?proto.api.ResponseMetadata}
 */
proto.api.StoreResponse.prototype.getMetadata = function() {
  return /** @type{?proto.api.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.ResponseMetadata, 1));
};


/** @param {?proto.api.ResponseMetadata|undefined} value */
proto.api.StoreResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.StoreResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.StoreResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.GetRequest.displayName = 'proto.api.GetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.RequestMetadata.toObject(includeInstance, f),
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.GetRequest}
 */
proto.api.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.GetRequest;
  return proto.api.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.GetRequest}
 */
proto.api.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestMetadata;
      reader.readMessage(value,proto.api.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.GetRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.GetRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = this.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional RequestMetadata metadata = 1;
 * @return {?proto.api.RequestMetadata}
 */
proto.api.GetRequest.prototype.getMetadata = function() {
  return /** @type{?proto.api.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestMetadata, 1));
};


/** @param {?proto.api.RequestMetadata|undefined} value */
proto.api.GetRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.GetRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.GetRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.GetRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.api.GetRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.api.GetRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.GetRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.GetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.GetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.GetResponse.displayName = 'proto.api.GetResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.GetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.GetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.GetResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.GetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.ResponseMetadata.toObject(includeInstance, f),
    value: (f = msg.getValue()) && librarian_api_documents_pb.Document.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.GetResponse}
 */
proto.api.GetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.GetResponse;
  return proto.api.GetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.GetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.GetResponse}
 */
proto.api.GetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ResponseMetadata;
      reader.readMessage(value,proto.api.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new librarian_api_documents_pb.Document;
      reader.readMessage(value,librarian_api_documents_pb.Document.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.GetResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.GetResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.GetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.GetResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      librarian_api_documents_pb.Document.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMetadata metadata = 1;
 * @return {?proto.api.ResponseMetadata}
 */
proto.api.GetResponse.prototype.getMetadata = function() {
  return /** @type{?proto.api.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.ResponseMetadata, 1));
};


/** @param {?proto.api.ResponseMetadata|undefined} value */
proto.api.GetResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.GetResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.GetResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Document value = 2;
 * @return {?proto.api.Document}
 */
proto.api.GetResponse.prototype.getValue = function() {
  return /** @type{?proto.api.Document} */ (
    jspb.Message.getWrapperField(this, librarian_api_documents_pb.Document, 2));
};


/** @param {?proto.api.Document|undefined} value */
proto.api.GetResponse.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.GetResponse.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.GetResponse.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.PutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.PutRequest.displayName = 'proto.api.PutRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PutRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.PutRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.RequestMetadata.toObject(includeInstance, f),
    key: msg.getKey_asB64(),
    value: (f = msg.getValue()) && librarian_api_documents_pb.Document.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PutRequest}
 */
proto.api.PutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PutRequest;
  return proto.api.PutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PutRequest}
 */
proto.api.PutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestMetadata;
      reader.readMessage(value,proto.api.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = new librarian_api_documents_pb.Document;
      reader.readMessage(value,librarian_api_documents_pb.Document.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.PutRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.PutRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.PutRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = this.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      librarian_api_documents_pb.Document.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMetadata metadata = 1;
 * @return {?proto.api.RequestMetadata}
 */
proto.api.PutRequest.prototype.getMetadata = function() {
  return /** @type{?proto.api.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestMetadata, 1));
};


/** @param {?proto.api.RequestMetadata|undefined} value */
proto.api.PutRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.PutRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.PutRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.PutRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.api.PutRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.api.PutRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.PutRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Document value = 3;
 * @return {?proto.api.Document}
 */
proto.api.PutRequest.prototype.getValue = function() {
  return /** @type{?proto.api.Document} */ (
    jspb.Message.getWrapperField(this, librarian_api_documents_pb.Document, 3));
};


/** @param {?proto.api.Document|undefined} value */
proto.api.PutRequest.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.PutRequest.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.PutRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PutResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.PutResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.PutResponse.displayName = 'proto.api.PutResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PutResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PutResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PutResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.PutResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.ResponseMetadata.toObject(includeInstance, f),
    operation: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nReplicas: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PutResponse}
 */
proto.api.PutResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PutResponse;
  return proto.api.PutResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PutResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PutResponse}
 */
proto.api.PutResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ResponseMetadata;
      reader.readMessage(value,proto.api.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!proto.api.PutOperation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNReplicas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.PutResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.PutResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PutResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.PutResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = this.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getNReplicas();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional ResponseMetadata metadata = 1;
 * @return {?proto.api.ResponseMetadata}
 */
proto.api.PutResponse.prototype.getMetadata = function() {
  return /** @type{?proto.api.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.ResponseMetadata, 1));
};


/** @param {?proto.api.ResponseMetadata|undefined} value */
proto.api.PutResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.PutResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.PutResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PutOperation operation = 2;
 * @return {!proto.api.PutOperation}
 */
proto.api.PutResponse.prototype.getOperation = function() {
  return /** @type {!proto.api.PutOperation} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.api.PutOperation} value */
proto.api.PutResponse.prototype.setOperation = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 n_replicas = 3;
 * @return {number}
 */
proto.api.PutResponse.prototype.getNReplicas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.api.PutResponse.prototype.setNReplicas = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.SubscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.SubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.SubscribeRequest.displayName = 'proto.api.SubscribeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.SubscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.SubscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.SubscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.SubscribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.RequestMetadata.toObject(includeInstance, f),
    subscription: (f = msg.getSubscription()) && proto.api.Subscription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.SubscribeRequest}
 */
proto.api.SubscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.SubscribeRequest;
  return proto.api.SubscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.SubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.SubscribeRequest}
 */
proto.api.SubscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RequestMetadata;
      reader.readMessage(value,proto.api.RequestMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.api.Subscription;
      reader.readMessage(value,proto.api.Subscription.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.SubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.SubscribeRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.SubscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.SubscribeRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RequestMetadata.serializeBinaryToWriter
    );
  }
  f = this.getSubscription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Subscription.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestMetadata metadata = 1;
 * @return {?proto.api.RequestMetadata}
 */
proto.api.SubscribeRequest.prototype.getMetadata = function() {
  return /** @type{?proto.api.RequestMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.RequestMetadata, 1));
};


/** @param {?proto.api.RequestMetadata|undefined} value */
proto.api.SubscribeRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.SubscribeRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SubscribeRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Subscription subscription = 2;
 * @return {?proto.api.Subscription}
 */
proto.api.SubscribeRequest.prototype.getSubscription = function() {
  return /** @type{?proto.api.Subscription} */ (
    jspb.Message.getWrapperField(this, proto.api.Subscription, 2));
};


/** @param {?proto.api.Subscription|undefined} value */
proto.api.SubscribeRequest.prototype.setSubscription = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.SubscribeRequest.prototype.clearSubscription = function() {
  this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SubscribeRequest.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.SubscribeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.SubscribeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.SubscribeResponse.displayName = 'proto.api.SubscribeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.SubscribeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.SubscribeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.SubscribeResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.SubscribeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.api.ResponseMetadata.toObject(includeInstance, f),
    key: msg.getKey_asB64(),
    value: (f = msg.getValue()) && proto.api.Publication.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.SubscribeResponse}
 */
proto.api.SubscribeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.SubscribeResponse;
  return proto.api.SubscribeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.SubscribeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.SubscribeResponse}
 */
proto.api.SubscribeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ResponseMetadata;
      reader.readMessage(value,proto.api.ResponseMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = new proto.api.Publication;
      reader.readMessage(value,proto.api.Publication.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.SubscribeResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.SubscribeResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.SubscribeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.SubscribeResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.ResponseMetadata.serializeBinaryToWriter
    );
  }
  f = this.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Publication.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseMetadata metadata = 1;
 * @return {?proto.api.ResponseMetadata}
 */
proto.api.SubscribeResponse.prototype.getMetadata = function() {
  return /** @type{?proto.api.ResponseMetadata} */ (
    jspb.Message.getWrapperField(this, proto.api.ResponseMetadata, 1));
};


/** @param {?proto.api.ResponseMetadata|undefined} value */
proto.api.SubscribeResponse.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.SubscribeResponse.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SubscribeResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.SubscribeResponse.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.api.SubscribeResponse.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.api.SubscribeResponse.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.SubscribeResponse.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Publication value = 3;
 * @return {?proto.api.Publication}
 */
proto.api.SubscribeResponse.prototype.getValue = function() {
  return /** @type{?proto.api.Publication} */ (
    jspb.Message.getWrapperField(this, proto.api.Publication, 3));
};


/** @param {?proto.api.Publication|undefined} value */
proto.api.SubscribeResponse.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.SubscribeResponse.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SubscribeResponse.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Publication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Publication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Publication.displayName = 'proto.api.Publication';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Publication.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Publication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Publication} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.Publication.toObject = function(includeInstance, msg) {
  var f, obj = {
    envelopeKey: msg.getEnvelopeKey_asB64(),
    entryKey: msg.getEntryKey_asB64(),
    authorPublicKey: msg.getAuthorPublicKey_asB64(),
    readerPublicKey: msg.getReaderPublicKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Publication}
 */
proto.api.Publication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Publication;
  return proto.api.Publication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Publication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Publication}
 */
proto.api.Publication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEnvelopeKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntryKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthorPublicKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReaderPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.Publication} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Publication.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Publication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Publication.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEnvelopeKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getEntryKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getAuthorPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getReaderPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes envelope_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Publication.prototype.getEnvelopeKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes envelope_key = 1;
 * This is a type-conversion wrapper around `getEnvelopeKey()`
 * @return {string}
 */
proto.api.Publication.prototype.getEnvelopeKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEnvelopeKey()));
};


/**
 * optional bytes envelope_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEnvelopeKey()`
 * @return {!Uint8Array}
 */
proto.api.Publication.prototype.getEnvelopeKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEnvelopeKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Publication.prototype.setEnvelopeKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes entry_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.Publication.prototype.getEntryKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes entry_key = 2;
 * This is a type-conversion wrapper around `getEntryKey()`
 * @return {string}
 */
proto.api.Publication.prototype.getEntryKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntryKey()));
};


/**
 * optional bytes entry_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntryKey()`
 * @return {!Uint8Array}
 */
proto.api.Publication.prototype.getEntryKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntryKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Publication.prototype.setEntryKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes author_public_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.api.Publication.prototype.getAuthorPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes author_public_key = 3;
 * This is a type-conversion wrapper around `getAuthorPublicKey()`
 * @return {string}
 */
proto.api.Publication.prototype.getAuthorPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthorPublicKey()));
};


/**
 * optional bytes author_public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthorPublicKey()`
 * @return {!Uint8Array}
 */
proto.api.Publication.prototype.getAuthorPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthorPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Publication.prototype.setAuthorPublicKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes reader_public_key = 4;
 * @return {!(string|Uint8Array)}
 */
proto.api.Publication.prototype.getReaderPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes reader_public_key = 4;
 * This is a type-conversion wrapper around `getReaderPublicKey()`
 * @return {string}
 */
proto.api.Publication.prototype.getReaderPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReaderPublicKey()));
};


/**
 * optional bytes reader_public_key = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReaderPublicKey()`
 * @return {!Uint8Array}
 */
proto.api.Publication.prototype.getReaderPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReaderPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Publication.prototype.setReaderPublicKey = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Subscription.displayName = 'proto.api.Subscription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Subscription.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Subscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Subscription} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.Subscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorPublicKeys: (f = msg.getAuthorPublicKeys()) && proto.api.BloomFilter.toObject(includeInstance, f),
    readerPublicKeys: (f = msg.getReaderPublicKeys()) && proto.api.BloomFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Subscription}
 */
proto.api.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Subscription;
  return proto.api.Subscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Subscription}
 */
proto.api.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.BloomFilter;
      reader.readMessage(value,proto.api.BloomFilter.deserializeBinaryFromReader);
      msg.setAuthorPublicKeys(value);
      break;
    case 2:
      var value = new proto.api.BloomFilter;
      reader.readMessage(value,proto.api.BloomFilter.deserializeBinaryFromReader);
      msg.setReaderPublicKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Subscription.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Subscription.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAuthorPublicKeys();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.BloomFilter.serializeBinaryToWriter
    );
  }
  f = this.getReaderPublicKeys();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.BloomFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional BloomFilter author_public_keys = 1;
 * @return {?proto.api.BloomFilter}
 */
proto.api.Subscription.prototype.getAuthorPublicKeys = function() {
  return /** @type{?proto.api.BloomFilter} */ (
    jspb.Message.getWrapperField(this, proto.api.BloomFilter, 1));
};


/** @param {?proto.api.BloomFilter|undefined} value */
proto.api.Subscription.prototype.setAuthorPublicKeys = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.Subscription.prototype.clearAuthorPublicKeys = function() {
  this.setAuthorPublicKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Subscription.prototype.hasAuthorPublicKeys = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BloomFilter reader_public_keys = 2;
 * @return {?proto.api.BloomFilter}
 */
proto.api.Subscription.prototype.getReaderPublicKeys = function() {
  return /** @type{?proto.api.BloomFilter} */ (
    jspb.Message.getWrapperField(this, proto.api.BloomFilter, 2));
};


/** @param {?proto.api.BloomFilter|undefined} value */
proto.api.Subscription.prototype.setReaderPublicKeys = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.Subscription.prototype.clearReaderPublicKeys = function() {
  this.setReaderPublicKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Subscription.prototype.hasReaderPublicKeys = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.BloomFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.BloomFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.BloomFilter.displayName = 'proto.api.BloomFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.BloomFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.BloomFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.BloomFilter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.BloomFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    encoded: msg.getEncoded_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.BloomFilter}
 */
proto.api.BloomFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.BloomFilter;
  return proto.api.BloomFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.BloomFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.BloomFilter}
 */
proto.api.BloomFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncoded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.BloomFilter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.BloomFilter.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.BloomFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.BloomFilter.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEncoded_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes encoded = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.BloomFilter.prototype.getEncoded = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encoded = 1;
 * This is a type-conversion wrapper around `getEncoded()`
 * @return {string}
 */
proto.api.BloomFilter.prototype.getEncoded_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncoded()));
};


/**
 * optional bytes encoded = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncoded()`
 * @return {!Uint8Array}
 */
proto.api.BloomFilter.prototype.getEncoded_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncoded()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.BloomFilter.prototype.setEncoded = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.api.PutOperation = {
  STORED: 0,
  LEFT_EXISTING: 1
};

goog.object.extend(exports, proto.api);
