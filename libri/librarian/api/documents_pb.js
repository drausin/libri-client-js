/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.api.CompressionCodec', null, global);
goog.exportSymbol('proto.api.Document', null, global);
goog.exportSymbol('proto.api.Entry', null, global);
goog.exportSymbol('proto.api.EntryMetadata', null, global);
goog.exportSymbol('proto.api.EntrySchema', null, global);
goog.exportSymbol('proto.api.Envelope', null, global);
goog.exportSymbol('proto.api.Page', null, global);
goog.exportSymbol('proto.api.PageKeys', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Document = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.Document.oneofGroups_);
};
goog.inherits(proto.api.Document, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Document.displayName = 'proto.api.Document';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.Document.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.api.Document.ContentsCase = {
  CONTENTS_NOT_SET: 0,
  ENVELOPE: 1,
  ENTRY: 2,
  PAGE: 3
};

/**
 * @return {proto.api.Document.ContentsCase}
 */
proto.api.Document.prototype.getContentsCase = function() {
  return /** @type {proto.api.Document.ContentsCase} */(jspb.Message.computeOneofCase(this, proto.api.Document.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Document.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Document.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Document} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.Document.toObject = function(includeInstance, msg) {
  var f, obj = {
    envelope: (f = msg.getEnvelope()) && proto.api.Envelope.toObject(includeInstance, f),
    entry: (f = msg.getEntry()) && proto.api.Entry.toObject(includeInstance, f),
    page: (f = msg.getPage()) && proto.api.Page.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Document}
 */
proto.api.Document.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Document;
  return proto.api.Document.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Document} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Document}
 */
proto.api.Document.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Envelope;
      reader.readMessage(value,proto.api.Envelope.deserializeBinaryFromReader);
      msg.setEnvelope(value);
      break;
    case 2:
      var value = new proto.api.Entry;
      reader.readMessage(value,proto.api.Entry.deserializeBinaryFromReader);
      msg.setEntry(value);
      break;
    case 3:
      var value = new proto.api.Page;
      reader.readMessage(value,proto.api.Page.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.Document} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Document.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Document.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Document.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEnvelope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Envelope.serializeBinaryToWriter
    );
  }
  f = this.getEntry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Entry.serializeBinaryToWriter
    );
  }
  f = this.getPage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Page.serializeBinaryToWriter
    );
  }
};


/**
 * optional Envelope envelope = 1;
 * @return {?proto.api.Envelope}
 */
proto.api.Document.prototype.getEnvelope = function() {
  return /** @type{?proto.api.Envelope} */ (
    jspb.Message.getWrapperField(this, proto.api.Envelope, 1));
};


/** @param {?proto.api.Envelope|undefined} value */
proto.api.Document.prototype.setEnvelope = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.api.Document.oneofGroups_[0], value);
};


proto.api.Document.prototype.clearEnvelope = function() {
  this.setEnvelope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Document.prototype.hasEnvelope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Entry entryDocKey = 2;
 * @return {?proto.api.Entry}
 */
proto.api.Document.prototype.getEntry = function() {
  return /** @type{?proto.api.Entry} */ (
    jspb.Message.getWrapperField(this, proto.api.Entry, 2));
};


/** @param {?proto.api.Entry|undefined} value */
proto.api.Document.prototype.setEntry = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.api.Document.oneofGroups_[0], value);
};


proto.api.Document.prototype.clearEntry = function() {
  this.setEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Document.prototype.hasEntry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Page page = 3;
 * @return {?proto.api.Page}
 */
proto.api.Document.prototype.getPage = function() {
  return /** @type{?proto.api.Page} */ (
    jspb.Message.getWrapperField(this, proto.api.Page, 3));
};


/** @param {?proto.api.Page|undefined} value */
proto.api.Document.prototype.setPage = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.api.Document.oneofGroups_[0], value);
};


proto.api.Document.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Document.prototype.hasPage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Envelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Envelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Envelope.displayName = 'proto.api.Envelope';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Envelope.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Envelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Envelope} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.Envelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    entryKey: msg.getEntryKey_asB64(),
    authorPublicKey: msg.getAuthorPublicKey_asB64(),
    readerPublicKey: msg.getReaderPublicKey_asB64(),
    eekCiphertext: msg.getEekCiphertext_asB64(),
    eekCiphertextMac: msg.getEekCiphertextMac_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Envelope}
 */
proto.api.Envelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Envelope;
  return proto.api.Envelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Envelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Envelope}
 */
proto.api.Envelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntryKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthorPublicKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReaderPublicKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEekCiphertext(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEekCiphertextMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.Envelope} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Envelope.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Envelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Envelope.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEntryKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getAuthorPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getReaderPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getEekCiphertext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getEekCiphertextMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes entry_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Envelope.prototype.getEntryKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes entry_key = 1;
 * This is a type-conversion wrapper around `getEntryKey()`
 * @return {string}
 */
proto.api.Envelope.prototype.getEntryKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntryKey()));
};


/**
 * optional bytes entry_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntryKey()`
 * @return {!Uint8Array}
 */
proto.api.Envelope.prototype.getEntryKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntryKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Envelope.prototype.setEntryKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes author_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.api.Envelope.prototype.getAuthorPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes author_public_key = 2;
 * This is a type-conversion wrapper around `getAuthorPublicKey()`
 * @return {string}
 */
proto.api.Envelope.prototype.getAuthorPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthorPublicKey()));
};


/**
 * optional bytes author_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthorPublicKey()`
 * @return {!Uint8Array}
 */
proto.api.Envelope.prototype.getAuthorPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthorPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Envelope.prototype.setAuthorPublicKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes reader_public_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.api.Envelope.prototype.getReaderPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes reader_public_key = 3;
 * This is a type-conversion wrapper around `getReaderPublicKey()`
 * @return {string}
 */
proto.api.Envelope.prototype.getReaderPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReaderPublicKey()));
};


/**
 * optional bytes reader_public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReaderPublicKey()`
 * @return {!Uint8Array}
 */
proto.api.Envelope.prototype.getReaderPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReaderPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Envelope.prototype.setReaderPublicKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes eek_ciphertext = 4;
 * @return {!(string|Uint8Array)}
 */
proto.api.Envelope.prototype.getEekCiphertext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes eek_ciphertext = 4;
 * This is a type-conversion wrapper around `getEekCiphertext()`
 * @return {string}
 */
proto.api.Envelope.prototype.getEekCiphertext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEekCiphertext()));
};


/**
 * optional bytes eek_ciphertext = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEekCiphertext()`
 * @return {!Uint8Array}
 */
proto.api.Envelope.prototype.getEekCiphertext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEekCiphertext()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Envelope.prototype.setEekCiphertext = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes eek_ciphertext_mac = 5;
 * @return {!(string|Uint8Array)}
 */
proto.api.Envelope.prototype.getEekCiphertextMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes eek_ciphertext_mac = 5;
 * This is a type-conversion wrapper around `getEekCiphertextMac()`
 * @return {string}
 */
proto.api.Envelope.prototype.getEekCiphertextMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEekCiphertextMac()));
};


/**
 * optional bytes eek_ciphertext_mac = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEekCiphertextMac()`
 * @return {!Uint8Array}
 */
proto.api.Envelope.prototype.getEekCiphertextMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEekCiphertextMac()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Envelope.prototype.setEekCiphertextMac = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.Entry.oneofGroups_);
};
goog.inherits(proto.api.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Entry.displayName = 'proto.api.Entry';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.Entry.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.api.Entry.ContentsCase = {
  CONTENTS_NOT_SET: 0,
  PAGE: 2,
  PAGE_KEYS: 3
};

/**
 * @return {proto.api.Entry.ContentsCase}
 */
proto.api.Entry.prototype.getContentsCase = function() {
  return /** @type {proto.api.Entry.ContentsCase} */(jspb.Message.computeOneofCase(this, proto.api.Entry.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Entry.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Entry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.Entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorPublicKey: msg.getAuthorPublicKey_asB64(),
    page: (f = msg.getPage()) && proto.api.Page.toObject(includeInstance, f),
    pageKeys: (f = msg.getPageKeys()) && proto.api.PageKeys.toObject(includeInstance, f),
    createdTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    metadataCiphertext: msg.getMetadataCiphertext_asB64(),
    metadataCiphertextMac: msg.getMetadataCiphertextMac_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Entry}
 */
proto.api.Entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Entry;
  return proto.api.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Entry}
 */
proto.api.Entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthorPublicKey(value);
      break;
    case 2:
      var value = new proto.api.Page;
      reader.readMessage(value,proto.api.Page.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    case 3:
      var value = new proto.api.PageKeys;
      reader.readMessage(value,proto.api.PageKeys.deserializeBinaryFromReader);
      msg.setPageKeys(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedTime(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadataCiphertext(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadataCiphertextMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.Entry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Entry.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Entry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAuthorPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getPage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Page.serializeBinaryToWriter
    );
  }
  f = this.getPageKeys();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.PageKeys.serializeBinaryToWriter
    );
  }
  f = this.getCreatedTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getMetadataCiphertext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = this.getMetadataCiphertextMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes author_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Entry.prototype.getAuthorPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes author_public_key = 1;
 * This is a type-conversion wrapper around `getAuthorPublicKey()`
 * @return {string}
 */
proto.api.Entry.prototype.getAuthorPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthorPublicKey()));
};


/**
 * optional bytes author_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthorPublicKey()`
 * @return {!Uint8Array}
 */
proto.api.Entry.prototype.getAuthorPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthorPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Entry.prototype.setAuthorPublicKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Page page = 2;
 * @return {?proto.api.Page}
 */
proto.api.Entry.prototype.getPage = function() {
  return /** @type{?proto.api.Page} */ (
    jspb.Message.getWrapperField(this, proto.api.Page, 2));
};


/** @param {?proto.api.Page|undefined} value */
proto.api.Entry.prototype.setPage = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.api.Entry.oneofGroups_[0], value);
};


proto.api.Entry.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Entry.prototype.hasPage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PageKeys page_keys = 3;
 * @return {?proto.api.PageKeys}
 */
proto.api.Entry.prototype.getPageKeys = function() {
  return /** @type{?proto.api.PageKeys} */ (
    jspb.Message.getWrapperField(this, proto.api.PageKeys, 3));
};


/** @param {?proto.api.PageKeys|undefined} value */
proto.api.Entry.prototype.setPageKeys = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.api.Entry.oneofGroups_[0], value);
};


proto.api.Entry.prototype.clearPageKeys = function() {
  this.setPageKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Entry.prototype.hasPageKeys = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 created_time = 4;
 * @return {number}
 */
proto.api.Entry.prototype.getCreatedTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.api.Entry.prototype.setCreatedTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes metadata_ciphertext = 5;
 * @return {!(string|Uint8Array)}
 */
proto.api.Entry.prototype.getMetadataCiphertext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes metadata_ciphertext = 5;
 * This is a type-conversion wrapper around `getMetadataCiphertext()`
 * @return {string}
 */
proto.api.Entry.prototype.getMetadataCiphertext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadataCiphertext()));
};


/**
 * optional bytes metadata_ciphertext = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadataCiphertext()`
 * @return {!Uint8Array}
 */
proto.api.Entry.prototype.getMetadataCiphertext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadataCiphertext()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Entry.prototype.setMetadataCiphertext = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes metadata_ciphertext_mac = 6;
 * @return {!(string|Uint8Array)}
 */
proto.api.Entry.prototype.getMetadataCiphertextMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes metadata_ciphertext_mac = 6;
 * This is a type-conversion wrapper around `getMetadataCiphertextMac()`
 * @return {string}
 */
proto.api.Entry.prototype.getMetadataCiphertextMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadataCiphertextMac()));
};


/**
 * optional bytes metadata_ciphertext_mac = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadataCiphertextMac()`
 * @return {!Uint8Array}
 */
proto.api.Entry.prototype.getMetadataCiphertextMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadataCiphertextMac()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Entry.prototype.setMetadataCiphertextMac = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.EntryMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.EntryMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.EntryMetadata.displayName = 'proto.api.EntryMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.EntryMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.api.EntryMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.EntryMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.EntryMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediaType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    compressionCodec: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ciphertextSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ciphertextMac: msg.getCiphertextMac_asB64(),
    uncompressedSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    uncompressedMac: msg.getUncompressedMac_asB64(),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toArray() : [],
    filepath: jspb.Message.getFieldWithDefault(msg, 8, ""),
    schema: (f = msg.getSchema()) && proto.api.EntrySchema.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.EntryMetadata}
 */
proto.api.EntryMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.EntryMetadata;
  return proto.api.EntryMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.EntryMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.EntryMetadata}
 */
proto.api.EntryMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMediaType(value);
      break;
    case 2:
      var value = /** @type {!proto.api.CompressionCodec} */ (reader.readEnum());
      msg.setCompressionCodec(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCiphertextSize(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCiphertextMac(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUncompressedSize(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUncompressedMac(value);
      break;
    case 7:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes);
         });
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilepath(value);
      break;
    case 9:
      var value = new proto.api.EntrySchema;
      reader.readMessage(value,proto.api.EntrySchema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.EntryMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.EntryMetadata.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.EntryMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.EntryMetadata.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMediaType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCompressionCodec();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getCiphertextSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getCiphertextMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getUncompressedSize();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = this.getUncompressedMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = this.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = this.getFilepath();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getSchema();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.api.EntrySchema.serializeBinaryToWriter
    );
  }
};


/**
 * optional string media_type = 1;
 * @return {string}
 */
proto.api.EntryMetadata.prototype.getMediaType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.EntryMetadata.prototype.setMediaType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CompressionCodec compression_codec = 2;
 * @return {!proto.api.CompressionCodec}
 */
proto.api.EntryMetadata.prototype.getCompressionCodec = function() {
  return /** @type {!proto.api.CompressionCodec} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.api.CompressionCodec} value */
proto.api.EntryMetadata.prototype.setCompressionCodec = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 ciphertext_size = 3;
 * @return {number}
 */
proto.api.EntryMetadata.prototype.getCiphertextSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.api.EntryMetadata.prototype.setCiphertextSize = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes ciphertext_mac = 4;
 * @return {!(string|Uint8Array)}
 */
proto.api.EntryMetadata.prototype.getCiphertextMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ciphertext_mac = 4;
 * This is a type-conversion wrapper around `getCiphertextMac()`
 * @return {string}
 */
proto.api.EntryMetadata.prototype.getCiphertextMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCiphertextMac()));
};


/**
 * optional bytes ciphertext_mac = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCiphertextMac()`
 * @return {!Uint8Array}
 */
proto.api.EntryMetadata.prototype.getCiphertextMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCiphertextMac()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.EntryMetadata.prototype.setCiphertextMac = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 uncompressed_size = 5;
 * @return {number}
 */
proto.api.EntryMetadata.prototype.getUncompressedSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.api.EntryMetadata.prototype.setUncompressedSize = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes uncompressed_mac = 6;
 * @return {!(string|Uint8Array)}
 */
proto.api.EntryMetadata.prototype.getUncompressedMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes uncompressed_mac = 6;
 * This is a type-conversion wrapper around `getUncompressedMac()`
 * @return {string}
 */
proto.api.EntryMetadata.prototype.getUncompressedMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUncompressedMac()));
};


/**
 * optional bytes uncompressed_mac = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUncompressedMac()`
 * @return {!Uint8Array}
 */
proto.api.EntryMetadata.prototype.getUncompressedMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUncompressedMac()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.EntryMetadata.prototype.setUncompressedMac = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * map<string, bytes> properties = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.api.EntryMetadata.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


proto.api.EntryMetadata.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
};


/**
 * optional string filepath = 8;
 * @return {string}
 */
proto.api.EntryMetadata.prototype.getFilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.api.EntryMetadata.prototype.setFilepath = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional EntrySchema schema = 9;
 * @return {?proto.api.EntrySchema}
 */
proto.api.EntryMetadata.prototype.getSchema = function() {
  return /** @type{?proto.api.EntrySchema} */ (
    jspb.Message.getWrapperField(this, proto.api.EntrySchema, 9));
};


/** @param {?proto.api.EntrySchema|undefined} value */
proto.api.EntryMetadata.prototype.setSchema = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.api.EntryMetadata.prototype.clearSchema = function() {
  this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.EntryMetadata.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.EntrySchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.EntrySchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.EntrySchema.displayName = 'proto.api.EntrySchema';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.EntrySchema.prototype.toObject = function(opt_includeInstance) {
  return proto.api.EntrySchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.EntrySchema} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.EntrySchema.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: jspb.Message.getFieldWithDefault(msg, 1, ""),
    project: jspb.Message.getFieldWithDefault(msg, 2, ""),
    path: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    version: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.EntrySchema}
 */
proto.api.EntrySchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.EntrySchema;
  return proto.api.EntrySchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.EntrySchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.EntrySchema}
 */
proto.api.EntrySchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProject(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.EntrySchema} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.EntrySchema.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.EntrySchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.EntrySchema.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGroup();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProject();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string group = 1;
 * @return {string}
 */
proto.api.EntrySchema.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.EntrySchema.prototype.setGroup = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string project = 2;
 * @return {string}
 */
proto.api.EntrySchema.prototype.getProject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.EntrySchema.prototype.setProject = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.api.EntrySchema.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.api.EntrySchema.prototype.setPath = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.api.EntrySchema.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.api.EntrySchema.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string version = 5;
 * @return {string}
 */
proto.api.EntrySchema.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.api.EntrySchema.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PageKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.PageKeys.repeatedFields_, null);
};
goog.inherits(proto.api.PageKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.PageKeys.displayName = 'proto.api.PageKeys';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.PageKeys.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PageKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PageKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PageKeys} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.PageKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: msg.getKeysList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PageKeys}
 */
proto.api.PageKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PageKeys;
  return proto.api.PageKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PageKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PageKeys}
 */
proto.api.PageKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.PageKeys} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.PageKeys.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PageKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.PageKeys.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeysList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes keys = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.api.PageKeys.prototype.getKeysList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes keys = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array.<string>}
 */
proto.api.PageKeys.prototype.getKeysList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getKeysList()));
};


/**
 * repeated bytes keys = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.api.PageKeys.prototype.getKeysList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getKeysList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.api.PageKeys.prototype.setKeysList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.api.PageKeys.prototype.addKeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.api.PageKeys.prototype.clearKeysList = function() {
  this.setKeysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Page = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Page, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Page.displayName = 'proto.api.Page';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Page.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Page.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Page} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.Page.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorPublicKey: msg.getAuthorPublicKey_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ciphertext: msg.getCiphertext_asB64(),
    ciphertextMac: msg.getCiphertextMac_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Page}
 */
proto.api.Page.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Page;
  return proto.api.Page.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Page} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Page}
 */
proto.api.Page.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthorPublicKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCiphertext(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCiphertextMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.Page} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Page.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Page.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.Page.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAuthorPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getCiphertext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getCiphertextMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes author_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.api.Page.prototype.getAuthorPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes author_public_key = 1;
 * This is a type-conversion wrapper around `getAuthorPublicKey()`
 * @return {string}
 */
proto.api.Page.prototype.getAuthorPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthorPublicKey()));
};


/**
 * optional bytes author_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthorPublicKey()`
 * @return {!Uint8Array}
 */
proto.api.Page.prototype.getAuthorPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthorPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Page.prototype.setAuthorPublicKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.api.Page.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.api.Page.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes ciphertext = 3;
 * @return {!(string|Uint8Array)}
 */
proto.api.Page.prototype.getCiphertext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ciphertext = 3;
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {string}
 */
proto.api.Page.prototype.getCiphertext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCiphertext()));
};


/**
 * optional bytes ciphertext = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {!Uint8Array}
 */
proto.api.Page.prototype.getCiphertext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCiphertext()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Page.prototype.setCiphertext = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes ciphertext_mac = 4;
 * @return {!(string|Uint8Array)}
 */
proto.api.Page.prototype.getCiphertextMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ciphertext_mac = 4;
 * This is a type-conversion wrapper around `getCiphertextMac()`
 * @return {string}
 */
proto.api.Page.prototype.getCiphertextMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCiphertextMac()));
};


/**
 * optional bytes ciphertext_mac = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCiphertextMac()`
 * @return {!Uint8Array}
 */
proto.api.Page.prototype.getCiphertextMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCiphertextMac()));
};


/** @param {!(string|Uint8Array)} value */
proto.api.Page.prototype.setCiphertextMac = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.api.CompressionCodec = {
  NONE: 0,
  GZIP: 1
};

goog.object.extend(exports, proto.api);
